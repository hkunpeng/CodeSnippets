<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>myRxTimer</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//开始倒计时
self.countDownStopped.accept(false)

//创建一个计时器
Observable&lt;Int&gt;.interval(RxTimeInterval.seconds(1), scheduler: MainScheduler.instance)
    .take(until: countDownStopped.asObservable().filter{ $0 }) //倒计时结束时停止计时器
    .subscribe { event in
        //每次剩余时间减1
        self.leftTime.accept(self.leftTime.value-1)
        // 如果剩余时间小于等于0
        if(self.leftTime.value == 0) {
            print("倒计时结束！")
            //结束倒计时
            self.countDownStopped.accept(true)
            //重置时间
            self.leftTime.accept(10)
        }
    }.disposed(by: disposeBag)


Observable.combineLatest(leftTime.asObservable(),countDownStopped.asObservable()) { leftTimeValue,countDownStoppedValue in
    if countDownStoppedValue {
        return "开始"
    }else{
        return "倒计时开始，还有 \(Int(leftTimeValue)) 秒..."
    }
}.bind(to:label.rx.text).disposed(by: disposeBag)
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>A8A94AB0-CF81-4982-A161-1A688811D03E</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>Rx定时器</string>
	<key>IDECodeSnippetTitle</key>
	<string>myRxTimer 创建一个Rx定时器</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
