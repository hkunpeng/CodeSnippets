<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>myinputtextView</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>class EHIVFInputView: UIView, UITextViewDelegate {
    var textViewDidChangeCallback: ((UITextView)-&gt;Void)?
    var textViewDidBeginCallback: ((UITextView)-&gt;Void)?
    lazy var lbTitle: UILabel = {
        let temp = EHUtility.eh_creatLabel(text: "", textAlignment: .left, textColor: "#383838".color, font: UIFont.systemFont(ofSize: 16, weight: .regular))
        temp.numberOfLines = 0
        return temp
    }()
    
    lazy var tfText: KMPlaceholderTextView = {
        let temp = KMPlaceholderTextView()
        temp.keyboardDismissMode = .onDrag
        temp.textContainerInset = .zero
        temp.textAlignment = EHLanguageManager.isRTL ? .left : .right
        temp.placeholder = "common_edit".localized
        temp.placeholderFont = UIFont.systemFont(ofSize: 16, weight: .regular)
        temp.placeholderColor = "#BDBDBD".color
        temp.textColor = "#383838".color
        temp.isScrollEnabled = false
        temp.font = UIFont.systemFont(ofSize: 16, weight: .regular)
        temp.delegate = self
        temp.typingAttributes = typingAttributes
        return temp
    }()
    
    lazy var typingAttributes: [NSAttributedString.Key : Any] = {
        let style = NSMutableParagraphStyle.init()
        style.lineSpacing = 4
        style.lineBreakMode = .byWordWrapping //自动换行
        style.alignment = EHLanguageManager.isRTL ?  .left : .right
        let typingAttributes = [NSAttributedString.Key.foregroundColor: "#383838".color,
                     NSAttributedString.Key.font: UIFont.systemFont(ofSize: 16, weight: .regular),
                     NSAttributedString.Key.paragraphStyle: style]
        return typingAttributes
    }()
    
    lazy var viewLine: UIView = {
        let temp = UIView()
        temp.backgroundColor = "#E5E5E5".color
        return temp
    }()
    
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        _setupUI()
        _layoutUI()
        _bind()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    fileprivate func _setupUI(){
        self.addSubview(lbTitle)
        self.addSubview(tfText)
        self.addSubview(viewLine)
    }
    
    fileprivate func _layoutUI(){
        lbTitle.setContentHuggingPriority(UILayoutPriority(rawValue: 258), for: .horizontal)
        lbTitle.setContentCompressionResistancePriority(UILayoutPriority(rawValue: 758), for: .horizontal)
        lbTitle.snp.makeConstraints { make in
            make.leading.equalTo(0)
            make.width.lessThanOrEqualTo(self).multipliedBy(0.5)
            make.top.equalTo(20)
            make.bottom.lessThanOrEqualTo(-20)
        }
        tfText.snp.makeConstraints { make in
            make.trailing.equalTo(0)
            make.centerY.equalTo(self)
            make.leading.equalTo(lbTitle.snp.trailing).offset(10)
            make.top.equalTo(20)
            make.bottom.lessThanOrEqualTo(-20)
            make.height.equalTo(24)
        }
        viewLine.snp.makeConstraints { make in
            make.bottom.equalTo(0)
            make.leading.trailing.equalTo(0)
            make.height.equalTo(1)
        }
    }
    
    func textViewDidChange(_ textView: UITextView) {
        // 更新 UITextView 的高度
        let size = textView.sizeThatFits(CGSize(width: textView.frame.width, height: CGFloat.greatestFiniteMagnitude))
        textView.snp.updateConstraints { make in
            let h = max(24.0, size.height)
            make.height.equalTo(h)
        }
        textViewDidChangeCallback?(textView)
    }
    
    func textViewDidBeginEditing(_ textView: UITextView) {
        textViewDidBeginCallback?(textView)
    }


    fileprivate func _bind(){

    }
    
    deinit{
        Log("EHIVFInputView is deinit")
    }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>A00B71F6-06EA-43ED-BB5B-9D236872B4B7</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>左边标题，右边输入框textView, textView动态高度</string>
	<key>IDECodeSnippetTitle</key>
	<string>myinputtextView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
